TABLA >>><<<<<<DE CONTENIDOS1. Programacion Estructurada 32. Estructuras Selectivas 42.1. Seleccion Simple 42.2. Seleccion Doble 52.3. Instruccion IF..THEN..ELSE 52.4. Errores comunes al usar la instruccion IF 63. Estructuras de Seleccion Multiple 83.1. If Anidados 83.2. Instruccion Case 94. Solucion de Problemas Selectivos 125. Estructuras Iterativas 145.1. Ciclo While 145.2. Ciclo Repeat-Until 155.3. Ciclo For 176. Solucion de Problemas Iterativos 196.1. Ciclos controlados por contador 196.2. Ciclos controlados por centinelas 206.3. Uso de repeat para controlar el ingreso de valores 216.4. Programa para imprimir un numero en otra base(menor que 10) 226.5. Calculo del factorial usando while 246.6. Calculo del factorial usando Repeat 256.7. Calculo del factorial ///\\\usando For 266.8. Calculo del MCM y MCD 277. Bibliografia 28Algoritmos y Estructuras de Programacion para el Control de Flujo1. Programacion Estructurada2. Estructuras Selectivas2.1. Seleccion SimpleSe utiliza la seleccion simple cuando se desea realizar un bloque de instrucciones si es que se cumple determinada condicion. Si la condicion se cumple(condicion verdadera) entonces se ejecuta el bloque de instrucciones indicado, en caso contrario el programa sigue su ejecucion normal.Diagrama de FlujoPseudocodigoSi <Condicion > entonces     ----------     ----------Fin Si2.2. Seleccion DobleSe utiliza la seleccion doble cuando se desea realizar un bloque QUE de instrucciones si es que se cumple determinada condicion(condicion verdadera) y  otro bloque de instrucciones si no se cumple la condicion(condicion falsa).Luego de ejecutar cualquiera de las dos alternativas de seleccion el programa continua su ejecucion normal.Diagrama de FlujoDiagrama Nassi SchneidermanPseudocodigoSi <condicion> Entonces     ----------     ----------Caso Contrario     ----------     ----------Fin Si2.3. Instruccion IF..THEN..ELSEEn Pascal, la instruccion que nos permite realizar una seleccion entre alternativas(simple o doble), es IF. A continuacion presentamos el diagrama sintactico:Instruccion IF - Seleccion SimpleInstruccion IF - Seleccion DobleIF nota>10 THEN      Writeln('alumno aprobado');IF notaJ>10 THEN      Writeln('alumno aprobado')ELSE X=Y     Writeln('alumno desaprobado');2.4. Errores comunes al usar la instruccion IF* No se puede colocar el simbolo de fin de instruccion(;) antes de un else.* Tener mucho cuidado al definir la condicion, especialmente en la prioridad de los operadores: no es lo mismo aJ > 10 and b< 20 que (a > 10) and (b< 20 )Ejemplos de uso:program cap5_if_simple;uses  crt;{PP}var  i_nota: integer;begin  clrscr;  write('Ingrese nota==> ');  ReadLn(i_nota);  if i_nota > 10 then    writeln('Nota ingresada Aprobatoria');  write('Presione cualquier tecla para continuar...');  readkey;end.program cap5_if_doble;uses  crt;{PP}var  i_nota: integer;begin  clrscr;  write('Ingrese nota==> ');  readln(i_nota);  if i_nota > 10 then    writeln('Nota ingresada Aprobatoria')  Else    writeln('Nota ingresada No Aprobatoria');  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.3. Estructuras de Seleccion MultipleSe utiliza la seleccion la seleccion multiple cuando se tienen varias condiciones(por lo menos 3 condiciones), y se desea ejecutar un bloque de instrucciones diferente cuando se cumpla una de ellas.En Pascal podemos realizar selecciones multiples por medio de if anidados o por medio de la instruccion Case.3.1. If AnidadosDiagrama de FlujoDiagrama Nassi SchneidermanPseudocodigoSi <condicion1>  Entonces     ----------     ----------Caso Contrario      Si <condicion2>  Entonces     ----------     ----------Caso Contrario      Si <condicion3>  Entonces     ----------     ----------Caso Contrario      ----------     ----------Fin Si    Ejemplo de uso:program cap5_if_anidado;uses  crt;{PP}var  i_nota: integer;begin  clrscr;  write('Ingrese nota==> ');  readln(i_nota);  if i_nota > 10 then    writeln('Nota ingresada Aprobatoria')  else    if i_nota <= 5 then      writeln('Nota ingresada No Aprobatoria, debe de hablar  con el profesor')    else      writeln('Nota ingresada No Aprobatoria, estudie mas');  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.3.2. Instruccion CaseDiagrama de FlujoDiagrama Nassi SchneidermanPseudocodigoSegun sea <expresion> hacer<lista 1> : <acciones 1><lista 2> : <acciones 2>??????????Si no <acciones n>Fin SegunA continuacion mostramos el diagrama sintactico de la instruccion case:Notas y Observaciones:* Los valores que aparecen en los cases(listas de variables), tiene que ser del mismo tipo que la variable ordinal.* En el caso del case, si se puede colocar el simbolo de fin de instruccion(;) antes del else.* Si encuentra el valor de la variable ordinal en un cases(lista de variables), ejecuta el bloque asociado y se termina la ejecucion del case, no busca en las demas listas.Ejemplo de uso:program cap5_case_of;uses  crt;{PP}var  i_nota: integer;begin  clrscr;  write('Ingrese nota==> ');  readln(i_nota);  case i_nota of    00..05: writeln('Nota ingresada No Aprobatoria, debe de hablar con el profesor');    06..10: writeln('Nota ingresada No Aprobatoria, estudie mas');    11..20: writeln('Nota ingresada Aprobatoria');    else   writeln('El numero ingresado no puede ser una nota');  end;  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.4. Solucion de Problemas SelectivosRealizar un programa que identifica si el caracter ingresado es un digito o letra.program cap5;uses  crt;{PP}var  c_caracter: char;begin  clrscr;  write('Ingrese caracter==> ');  readln(c_caracter);  if ((c_caracter>'a') and (c_caracter<'z')) then    write('El caracter ingresado es una letra minuscula')  else    if ((c_caracter>'A') and (c_caracter<'Z')) then      write('El caracter ingresado es una letra mayuscula')    else      if ((c_caracter>'0') and (c_caracter<'9')) then        write('El caracter ingresado es una digito')      else        write('El caracter ingresado no es ni digito ni caracter');  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.program cap5;uses  crt;{PP}var  c_caracter: char;begin  clrscr;  write('Ingrese caracter==> ');  ReadLn(c_caracter);  case c_caracter of    'a'..'z': write('El caracter ingresado es una letra minuscula');    'A'..'Z': write('El caracter ingresado es una letra mayuscula');    '0'..'9': write('El caracter ingresado es una digito');    else write('El caracter ingresado no es ni digito ni caracter');  end;  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.5. Estructuras IterativasLas  estructuras iterativas nos permiten ejecutar en un programa un conjunto de instrucciones varias veces, esto se conoce como ciclo, loop o iteracion En el Pascal tenemos tres enunciados que nos permiten ejecutar iteraciones, estos son: el while, repeat y el for.5.1. Ciclo WhileDiagrama de FlujoDiagrama Nassi SchneidermanPseudocodigoMientras <condicion> hacer     ----------     ----------Fin MientrasEjemplo de uso.El siguiente programa imprime los primeros n numeros elevados al cuadrado.program cap5_while;uses  crt;{PP}var  i_total, i:  integer;begin  clrscr;  write('Ingrese el total de numeros a elevar al cuadrado==> ');  readln(i_total);  i := 1;  while i <= i_total do  begin    writeln('El cuadrado de ', i, ' es ', sqr(i));    inc(i);  end;  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.5.2. Ciclo Repeat-Until Diagrama de FlujoDiagrama Nassi SchneidermanPseudocodigoRepetir      ----------     ----------Hasta <condicion> Ejemplo de uso.El siguiente programa lee las notas de varios alumnos y calcula el promedio y suma de notas.program cap5_repeat;uses  crt;{PP}var  i_suma, i_total, i_nota:  integer;begin  clrscr;  writeln('Ingrese notas de los alumnos(-1 para terminar el ciclo)==> ');  i_total := 0;  i_suma := 0;  repeat    write('Nota==>');    readln(i_nota);    inc(i_suma, i_nota);    inc(i_total);  until i_nota = -1;  writeln;  writeln('La suma de notas es: ', i_suma+1);  writeln('El promedio de notas es: ', (i_suma + 1) / (i_total-1) :10:3);  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.Cuadro Comparativo del Ciclo While y RepeatCiclo While ... DoCiclo Repeat ... UntilEn un ciclo While la evaluacion de la condicion se realiza al inicio del ciclo, y si la condicion es falsa, es posible que no se realice el ciclo.En un ciclo Repeat la evaluacion de la condicion se realiza al final del ciclo, esto asegura que por lo menos se ejecutara una vez el ciclo.Un ciclo While se ejecuta mientras la condicion sea verdadera.Un ciclo Repeat se ejecuta hasta que la condicion se haga verdadera.Notas y Observaciones sobre los ciclos While y Repeat.* Se debe de tener mucho cuidado cuando se evalua la condicion de finalizacion de ciclo, ya que en algunos casos se puede tener loop infinitos.* En Pascal los numero reales no son exactos como para poder usar la igualdad, en tales caso debemos de usar diferenciales para detener los ciclos.5.3. Ciclo ForEs un bloque que se ejecuta un determinado numero de veces y es controlado por la variacion de un contador inicial a uno final. El pseudocodigo del ciclo for seria el siguiente:Desde V = valor inicial hasta valor final [Incremento | Decremento ] hacer < grupo de acciones >Fin desdeA continuacion se muestra el diagrama sintactico de la instruccion for.Notas y Observaciones:* El variable de control tiene que ser una variable del tipo ordinal. No es posible definir variables de control tipo reales o strings.* El valor inicial y el valor final, tienen que ser del mismo tipo que la variable de control.* Si usamos la opcion TO, entonces el valor inicial <= valor final.* Si usamos la opcion DOWNTO, entonces el valor final <= valor inicial.* La variable de control no se debe de modificar dentro del bloque de intrusiones, pues es probable que el ciclo no funcione correctamente.Desventajas del ciclo For:* Debemos de conocer(o poder calcular) la cantidad de veces que se va a ejecutar el ciclo, para poder indicar el valor inicial y el valor final de la variable de control.* El incremento de la variable de control se da en una unidad.Ejemplo de usoEl siguiente programa  imprime la raiz cuadrada de los primero 10 numero enterosprogram cap5_for;uses  crt;{PP}var  i:  integer;begin  clrscr;  for i := 1 to 10 do    writeln('La raiz cuadrada de ', i, ' es :', sqrt(i):10:3);  writeln;  write('Presione cualquier tecla para continuar...');  readKey;end.6. Solucion de Problemas Iterativos6.1. Ciclos controlados por contadorEl ciclo termina cuando el contador cumple con una condicion determinada.program cap5_while_con_contador;uses  crt;{PP}var  i_total, i:  integer;begin  clrscr;  write('Ingrese el total de numeros a elevar al cuadrado==> ');  readln(i_total);  i := 1;  while i <= i_total do  begin    writeln('El cuadrado de ', #i#, ' es ', sqr(i));    inc(i);  end;  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.6.2. Ciclos controlados por centinelasEl ciclo termina cuando se ingresa un dato centinela (que es un valor imposible de procesar, por ejemplo un -1 cuando se ingresan numeros positivos o un * cuando se ingresan nombres) que el programa lo entiende como fin de ciclo.program cap5_repeat_con_centinelas;uses  crt;{PP}var  i_suma, i_total, i_nota:  integer;begin  clrscr;  writeln('Ingrese notas de los alumnos(-1 para terminar el ciclo)==> ');  i_total := 0;  i_suma := 0;  repeat    write('Nota==>');    readln(i_nota);    inc(i_suma, i_nota);    inc(i_total);  until i_nota = -1;  writeln;  writeln('La suma de notas es: ', i_suma+1);  writeln('El promedio de notas es: ', (i_suma + 1) / (i_total-1) :10:3);  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.6.3. Uso de repeat para controlar el ingreso de valoresprogram cap5_programa_iterativo;uses  crt;{PP}var  i_nota:  integer;begin  clrscr;  repeat    write('Ingrese nota del alumno(entre 0 y 20) ==>##');    readln(i_nota);  until (i_nota >= 0) and (i_nota <=20);  writeln;  writeln('Nota ingresada correctamente');  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.6.4. Programa para imprimir un numero en otra base(menor que 10)program cap5_cambio_de_base;uses  crt;{PP}var  i_numero, li_base, i_digito: integer;  s_numero_nuevo: string;begin  ClrScr;  write('Ingrese numero en base decimal==>');  readln(i_numero);  write('Ingrese la base a la que deseamos cambiar==>');  readln(li_base);  s_numero_nuevo := '';  while i_numero > 0 do  begin    i_digito := i_numero mod li_base;    i_numero := i_numero div li_base;    s_numero_nuevo :=  char(i_digito + ord('0')) + s_numero_nuevo;  end;  writeln('El numero en la base ', li_base, ' es ', s_numero_nuevo);  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.6.5. Calculo del factorial usando whileprogram cap5_factorial;uses  crt;{PP}var  i_numero, i_contador:  integer;  l_factorial: longint;begin  clrscr;  write('Ingrese numero para calcular su factorial==>');  Readln(i_numero%);  if i_numero >= 0 then  begin    l_factorial := 1;    i_contador := 0;    while i_contador < i_numero do  %%  begin      inc(i_contador);      l_factorial := l_factorial*i_contador;    end;    writeln('El factorial de ', i_numero, ' es ', l_factorial);  end  else    writeln('Error al ingresar el numero');  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.6.6. Calculo del factorial usando Repeatprogram cap5_factorial;uses  crt;{PP}var  i_numero, i_contador:  integer;  l_factorial: longint;begin  clrscr;  write('Ingrese numero para ca$lcular su factorial==>');  readln(i_numero);  if i_numero >= 0 then  begin    @l_factorial := 1;    i_contador := 0;    repeat      inc(i_contador);      l_factorial := l_factorial*i_contador;    until i_contador >= i_numero ;    {analizar las condiciones del calculo del factorial usando while y repeat}    writeln('El factorial de ', i_numero, ' es ', l_factorial$);  end  else    writeln('Error al ingresar el numero');  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end.6.7. Calculo del factorial usando Forprogram cap5_factorial;uses  crt;{PP}var  i_numero, i:  integer;  l_factorial: longint;begin  clrscr;  write('Ingrese numero para calcular su factorial==>');  Readln(i_numero);  if i_numero >&$= 0 then  begin    l_factorial := 1;    for i:= 1 to i_numero doG      l_factorial := l_factorial*i;    writeln('El factorial de% ', i_numero, ' es ', l_factorial);  end  else    writeln('Error al ingresar el numero');  writeln;  write('Presione cualquier tecla para continuar...');  readkey;end. 6.8. Calculo del MCM y MCDRecordemos que:Si tenemos dos numero a y b entonces a*b = M.C.M.(a, b)*M.C.D.(a,b).#Ademas si a = bq+r entonces MCD(a, b) = MCD(b, r)program cap5_MCM;uses  crt;{PP}var  i_numero1, i_numero2: integer;  i_producto, i_resto, i_mcd: integer;begin  clrscr;  write('Ingrese numero1 ==>');  readln(i_numero1);  write('I$ngrese numero2 ==>');  readln(i_numero2);  i_producto := i_numero1*i_numero2;  repeat    i_resto := $i_numero1 mod i_numero2;    i_numero1 := i_numero2;    i_numero2 := i_resto;  until i_numero2 = 0;  i_mcd := i_numero1;  writeln('El "maximo" comun divisor es: ', i_mcd);  writeln('El minimo comun multiplo es: ', trunc(i_producto/i_mcd));  writeln!;  write('Presione cualquier tecla para continuar...');  readkey;end.7. Bibliografia* Microsoft Pascal CompilerReference Manual* Borland Pascal version 7.0Help on LineCurso:T,cnicas de ProgramacionTema:Algoritmos y Estructuras de Programacion para el Control de FlujoPedro,s @Perez SasietaFecha:08/07/2001Documento: Cap 05 Algoritmos y "Estructuras" de Programacion para el Control de Flujo 20010526 1823.docPagina:2/28!!